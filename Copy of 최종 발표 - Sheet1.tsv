			관련코드	
슬라이드 번호	Sub Title	슬라이드 내용		발표 원고
1	표지	표지 제목: 기상 데이터를 활용한 쌀 생산량 예측		안녕하세요. 2조 발표를 시작하겠습니다.
2	프로젝트 배경​	프로젝트 배경 1) 기상 변화 영향 2) 생산량 감소 위험  예측모델의 중요성		
3	분석 및 예측 순서도​	  분석 및 예측 순서도		
4	Gantt Chart	간트차트(일정)		
5	Data	쌀 생산량 데이터(전라남도 통계자료)​  기간: 연 단위 데이터 (1995년~2024년)​  구조: 연도별 쌀 생산 통계​  주요 변수:​  생산량(톤)​  재배면적(ha)​  10a당 생산량(kg) 등​  기상 데이터(기상청 통계자료)​ 지점: 전라남도 주요 6개 지점 (목포, 여수, 완도, 장흥, 해남, 고흥)​ 기간: 1995년부터 최신 데이터까지​ 구조: 날짜별 측정 데이터​ 주요 변수:​  평균기온(°C)​  월합강수량(mm)​  일조율(%)​  평균풍속(m/s)​  합계일조시간(hr) 등​		
6	Data	쌀 생산량 통계		전라남도가 전체 쌀 생산량의 총 19.79% 차지하며, 전국에서 가장 높은 수치를 보였습니다. 이에 쌀 생산량 예측 범위를 전라남도로 한정하였습니다. 쌀 생산량 통계의 경우 여덟개의 항목으로 이루어져 있으며, 이 중 합계 면적, 합계 생산량, 면적당 생산량을 사용하였습니다. 기간은 1995년부터 2024년으로 한정하였습니다.
7	Data	쌀 생산량 통계 결측치 히트맵		쌀 생산량 데이터에서는 결측치가 존재하지 않았습니다. 
8	Data	쌀 생산량 통계의 '연도별 벼 재배 면적 변화' 및  '연도별 벼 합계 재배면적 변화' 그래프		전라남도의 벼 재배 면적은 2001년 이후 지속적으로 감소하는 경향을 보였습니다. 2003년 쌀 생산 조정제, 2011년 논 소득기반 다양화 사업 등의 영향이 있는 것으로 추측됩니다.
9	Data	연도별 합계 쌀 생산량 변화 및  연도별 면적당 쌀 생산량 변화 그래프		2001년 이후로 쌀 생산량은 지속적으로 감소하는 패턴을 보입니다.  면적당 쌀 생산량은 연도별 증감 패턴이 합계 생산량 그래프와 유사하나 전반적인 감소 추세는 뚜렷하지 않았습니다.
10	Data	기상 데이터 Raw 자료(기상자료개방포털)		기상 관측 자료는 기상자료개방 포털에서 가져왔습니다. 총 65종으로 구성된 기상 정보이며, 기간은 1995년부터 2024년까지로, 평년 단위만큼입니다. 다만 기상 관측이 1995년 이후에 시작된 지역이 많아, 여섯 곳의 관측치를 사용할 수 있었습니다.
11	Data	4가지 시각화 자료. 1)연도별 평균 기온 분포2) 2) 월별 평균 기온 분포 3) 연도별 누적강수량4) 월별 강수량 분포		기본 기상 통계를 가지고 몇 가지 기본적인 시각화를 해보았습니다. 위는 기온 통계, 아래는 강수량 통계를 사용하였습니다.
12	Data	6가지 시각화 자료. 1)월별 일조율분포  2)월별 평균해면기압분포 3)월별 평균수증기압분포 4)월별 평균상대습도 분포 5) 월별 평균풍속 분포 6)월별 합계 일조시간 분포		일조율, 평균해면기압, 평균수증기압, 평균상대습도, 평균풍속, 일조시간 등 피처를 월별로 시각화 하였습니다. 각 월과 계절에 따라 나타나는 패턴을 눈으로 확인할 수 있었습니다
13	Data	기상데이터 결측치 처리:​   선형 보간법(interpolation)을 사용하여 기상 데이터의 결측치를 보완.​   선형 보간법은 시간적 연속성을 유지하며 결측치를 채우는 데 적합.​ 변수 선택:​   상관관계 분석을 통해 쌀 생산량에 영향을 미치는 주요 변수 선정:​   평균기온, 월합강수량, 일조율 등.​   제외된 변수: '순간', '풍향', '적설' 등 특정 패턴의 변수는 모델링에 직접적 기여도가 낮아 제외.​ 피처 엔지니어링:​   월별 주기적 특성 반영:​    월_sin = sin(2π × 월/12)​    월_cos = cos(2π × 월/12)​    월별 주기성을 반영하여 모델이 계절성을 학습할 수 있도록 지원.​   4~9월 데이터의 평균값을 사용해 연간 기상 데이터 생성:​    주요 성장기 데이터를 집중적으로 분석하기 위함.		기상데이터의 결측치는 선형 보간법으로 보완하였고, 변수는 상관관계 분석을 통해 선정하였습니다. 순간, 풍향, 적설 등의 특정 패턴의 변수는 모델링에서 제외하였습니다. 그리고 월별 주기적 특성을 반영하기 위해 월_sin, 월_cos 값을 추가하여 모델이 계절성을 학습할 수 있게 하였습니다.
14	Data	기상 관측 데이터 결측치 Heatmap		기상 데이터 결측치 히트맵입니다. 결측값이 많은 데이터는 제외하였으며, 결측값의 수가 적은 경우 선형 보간하여 빈자리를 채웠습니다.
15	Data	기상 변수 간 상관관계 히트맵, 10a 생산량vs기상변수 상관관계 히트맵		기상 변수간 상관관계를 확인하고, 10a 생산량과 기상 변수 상관관계를 확인하였으며 평균 값, 높은 상관관계를 우선 순위로 두어 총 여덟개의 피처를 선택하였습니다.
16	Data	8개의 기상 변수와 월_sin, 월_cos으로 구성된 기상 관측 Data Frame		지점명, 연도와 선정한 여덟개의 속성 값에 월_sin, 월_cos 항목을 추가하여 월간 연속성과 계절성이 이어지도록 하였습니다.
17	Data	연단위 기상 데이터로 변환 및 면적당 쌀 생산량 병합​ 1) 월 단위 기상 데이터를 쌀 생산량 데이터의 해상도와 맞추기 위해 연단위 기상 데이터로 변환​ 2) 벼농사의 파종기~수확기인 4월~9월의 기상데이터 사용​ 3) 4월부터 9월의 평균값을 넣고 4월부터 9월의 강수량을 별개의 feature로 추가​ 4) 쌀 생산량 데이터로부터 10a 면적당 쌀 생산량 데이터 병합​ df_yearly.head() 출력결과	# 6) 4~9월 기상 변수별 연간 평균 계산 (소수점 2자리)​ df_apr_sep = df_monthly[df_monthly['월'].between(4, 9)]​ agg_funcs = {var: lambda x: round(x.mean(), 2) for var in weather_vars}​ df_yearly = (​     df_apr_sep​     .groupby(['지점명', '년'])​     .agg(agg_funcs)​     .reset_index())​ # 7) 4~9월 월별 강수량을 feature로 추가​ rain_pivot = (​     df_apr_sep​     .pivot_table(index=['지점명', '년'],​                  columns='월',​                  values='월합강수량(00~24h만)(mm)')​     .rename(columns=lambda m: f'{m}월_강수량')​     .reset_index())​ # 강수량 데이터 병합​ df_yearly = df_yearly.merge(rain_pivot, on=['지점명', '년'])​ # 1) df_rice에서 연도별 10a당 생산량만 추출해서 '년' 컬럼으로 이름 변경​ df_rice_year = df_rice[['시점', '10a당 생산량(kg)']].copy()​ df_rice_year.rename(columns={'시점': '년'}, inplace=True)​ # 만약 '년'이 문자열이라면 정수형으로 변환​ df_rice_year['년'] = df_rice_year['년'].astype(int)​ # 2) df_yearly에 연도 기준으로 병합​ df_yearly = df_yearly.merge(​     df_rice_year,​     on='년',​     how='left'   # 연도별로 일치하는 쌀 생산량을 가져오고, 없으면 NaN)​ # 결과 확인​ print(df_yearly.head())​	
18	Modeling	전체 과정 1. 기상예측 및 재배면적 예측 1.1. Seq2Seq LSTM : 기상 예측​→ 시간에 따른 누적 영향 및 ​복잡한 관계 고려 가능​ 1.1.1. XGBoost : 면적당 생산량 예측​ → 기상 데이터로 면적당 ​ 쌀 생산량 학습 및 예측 1.2 ETS : 재배 면적 예측​ → 매년 감소하는 추세를 보임​ 2. 예측한 재배면적*예측한 면적당 생산량 3. 최종 쌀 생산량 예측 		
19	Modeling - Seq2Seq LSTM​	지역별 기상 Feature들의 경우정상성과 비정상성이 섞여있음.​ 기상이라는 특성상 계절성 존재​ 시계열 데이터를 정상화하여 사용하기보단 비정상성 데이터도 소화할 수 있는 seq2seq LSTM 모델 사용​		
20	Modeling - Seq2Seq LSTM​	LSTM 작동 기본 모식도 1) Encoder 2) Context 3) Decoder		
21	Modeling - Seq2Seq LSTM​	1) 모든 출력 시점에 대해​ 다변량 특성을 예측하기 위해​ TimeDistributed(Dense) 레이어 추가​ 2) 하이퍼파라미터 탐색: keras-tuner Random​  LSTM 유닛 수: [32, 64, 128]​  드롭아웃 비율: [0.1, 0.2, ..., 0.5] (0.1 간격)​  학습률(Learning Rate): [1e-2, 1e-3, 1e-4]​  배치 크기: [8, 16, 32]​  평가지표: MSE(Mean Squared Error)​ 3) 학습 데이터와 검증 데이터를​ 80:20 비율로 나누어 모델을 학습​	def build_model(hp):​     n_feat = len(features)​     units = hp.Choice('units', [32, 64, 128])​     drop = hp.Float('dropout', 0.1, 0.5, step=0.1)​     lr = hp.Choice('lr', [1e-2, 1e-3, 1e-4])​     batch_size = hp.Choice('batch_size', [8, 16, 32])​ ​     enc_in = Input(shape=(lookback, n_feat))​     x, s_h, s_c = LSTM(units, return_state=True, dropout=drop)    ​      (enc_in)​     dec_in = Input(shape=(horizon, n_feat))​     x = LSTM(units, return_sequences=True, dropout=drop)(​         dec_in, initial_state=[s_h, s_c]​     )​     out = TimeDistributed(Dense(n_feat))(x)​ ​     model = Model([enc_in, dec_in], out)​     model.compile(optimizer=Adam(lr), loss='mse')​     return model​	
22	Modeling - Seq2Seq LSTM​	1. 기상 데이터는 데이터 특성상 이상치가 존재할 가능성 多​ 1) 이상치에 둔감한 RobustScaler를 이용하여 데이터 정규화​ 2. 지점별로 기상패턴이 다를 수 있음​ 1) 지점별로 각각의 개별 모델 + 개별 Scaler 적용​	# 결과 저장용 dict 초기화​ models            = {}​ feature_histories = {}​ scalers           = {}​  ​  for st in stations:​ ​     # (1) 지점별 데이터 준비​     df_st = df_monthly[df_monthly['지점명'] == st].sort_values(['년', ​              '월'])​     df_st.index = pd.to_datetime(df_st['년'].astype(str) + '-' + \​                    df_st['월'].astype(str).str.zfill(2) + '-01'​     )​     data = df_st[features].values​ ​     # (2) 지점별 RobustScaler fit​     scaler_st = RobustScaler().fit(data)​     scalers[st] = scaler_st​     data_scaled = scaler_st.transform(data)​ ​     # ... (이후 모델 학습 및 예측 코드)​     ​     # (8) 결과 저장​     models[st] = model​     feature_histories[st] = tracker​	
23	Modeling - Seq2Seq LSTM​	1) 선택한 하이퍼 파라미터​ LSTM 유닛 수: 128​ 드롭아웃 비율: 0.1​ 학습률(Learning Rate): 0.01​ 배치 크기: 16​ 에포크 수: 150​  2) 지점별 모델 학습 결과​ 고흥: Validation R² = 0.992​ 목포: Validation R² = 0.993​ 여수: Validation R² = 0.989​ 완도: Validation R² = 0.990​ 장흥: Validation R² = 0.991​ 해남: Validation R² = 0.990​		
24	Modeling - Seq2Seq LSTM​	지점별 24개월 예측​  ​  데이터 준비​  각 지점별 데이터 필터링 및 정렬​  시계열 형태 데이터로 변환하여 모델에 입력​  학습 시 사용한 스케일러(Robust scaler)를 적용하여 데이터 정규화​  ​  최종 입력 윈도우 생성​  예측을 위한 마지막 24개월 데이터를 모델에 입력으로 제공​  디코더 입력으로는 초기화된 0값을 사용하여 예측 시작​  ​  모델 예측 및 역변환​  모델이 생성한 예측값을 원래 범위로 되돌리기 위해 스케일링을 역변환​  ​  예측 결과 저장​  예측 값을 데이터프레임으로 저장하고, 각 지점의 결과를 병합​  ​	pred_dfs = []​ ​ for st in stations:​     # --- (1) 데이터 준비​     df_st = df_monthly[df_monthly['지점명']==st].sort_values(['년', '월'])​     df_st.index = pd.to_datetime(​         df_st['년'].astype(str) + '-' + df_st['월'].astype(str).str.zfill(2) + '-01'​     )​     data = df_st[features].values​ ​     # --- (2) station-specific scaler 사용​     scaler_st = scalers[st]​     data_scaled = scaler_st.transform(data)​ ​     # --- (3) 마지막 윈도우 입력​     last_X = data_scaled[-lookback:].reshape(1, lookback, len(features))​     dec_input = np.zeros((1, horizon, len(features)))​ ​     # --- (4) 예측 및 역변환​     model = models[st]​     pred_s = model.predict([last_X, dec_input], verbose=0)​     pred_flat = scaler_st.inverse_transform(pred_s.reshape(-1, len(features)))​     pred = pred_flat.reshape(horizon, len(features))​     pred = np.round(pred, 2)​ ​     # --- (5) DataFrame 생성​     future_idx = pd.date_range(df_st.index[-1] + pd.offsets.MonthBegin(),​                                periods=horizon, freq='MS')​     df_pred = pd.DataFrame(pred, index=future_idx, columns=features)​     df_pred['지점명'] = st​     pred_dfs.append(df_pred)​ ​ df_monthly_predict = pd.concat(pred_dfs).reset_index().rename(columns={'index': '일시'})​ print(df_monthly_predict.head())​	
25	Modeling - Seq2Seq LSTM​	지점별 예측 결과 시각화​  ​  과거 5년(60개월)과 미래 24개월 비교​  대체적으로 추세를 잘 반영​	fig, axes = plt.subplots(4, 2, figsize=(14, 12), sharex=False)​ axes = axes.flatten()​ ​ for ax, feat in zip(axes, features):​     # 실제: 최근 5년​     ax.plot(df_hist_5y.index, df_hist_5y[feat], '-', ​              label='Actual (Last 5y)')​     # 예측: 향후 24개월​     ax.plot(df_pred.index, df_pred[feat], '--', ​              marker='o', label='Forecast (24m)')​ ​     ax.set_title(feat)​     ax.legend()​     ax.grid(True)​	
26	Modeling - Seq2Seq LSTM​	4~9월 필터링 및 연간 데이터 생성​	# 1) 일시 → datetime, '년'/'월' 컬럼 추가​ df_monthly_predict['일시'] = pd.to_datetime(df_monthly_predict['일시'])​ df_monthly_predict['년'] = df_monthly_predict['일시'].dt.year​ df_monthly_predict['월'] = df_monthly_predict['일시'].dt.month​ ​ # 2) 4~9월 필터링​ df_apr_sep_pred = df_monthly_predict[df_monthly_predict['월'].between(4, 9)].copy()​ ​ # 3) 기상 변수별 연간 평균 계산​ agg_funcs = {var: lambda x: round(x.mean(), 2) for var in weather_vars}​ df_yearly_pred = (​     df_apr_sep_pred​       .groupby(['지점명', '년'])​       .agg(agg_funcs)​       .reset_index()​ )​ ​ # 4) 월별 강수량 데이터 추가​ rain_pivot = (​     df_apr_sep_pred​       .pivot_table(​           index=['지점명', '년'],​           columns='월',​           values='월합강수량(00~24h만)(mm)'​       )​       .rename(columns=lambda m: f'{m}월_강수량')​       .reset_index()​ )​ ​ df_yearly_pred = df_yearly_pred.merge(rain_pivot, on=['지점명', '년'])​ ​ # 5) '10a당 생산량(kg)' 컬럼 추가​ df_yearly_pred['예측_10a당생산량(kg)'] = pd.NA​	
27	Modeling - ETS	재배 면적의 경우 Trend를 가진​ 시계열 데이터임. ​ ADF & KPSS 검정 결과 ​비정상을 띄는 부분이 있음.​		
28	Modeling - ETS	1)비정상 시계열을 처리할 수 있는​ ETS모델을 사용하여 예측​  2) 하이퍼파라미터 탐색 ​    Trend 데이터 추세: additive, multiplicative​    Daped Trend 추세 감쇠 여부 : True, False ​   Seasonality: 연 단위 데이터이므로 제외​	for trend in ['add', 'mul']:​     for damped in [False, True]:​         try:​             model = ExponentialSmoothing(​                 ts_area,​                 trend=trend,​                 damped_trend=damped,​                 seasonal=None,​                 initialization_method='estimated'​             ).fit(optimized=True)​ ​             ​             rmse = np.sqrt(mean_squared_error(ts_area,             ​                     model.fittedvalues))​  ets_model = ExponentialSmoothing(​             ts_area,​             trend=best_trend,​             damped_trend=best_damped,​             seasonal=None,​             initialization_method='estimated'​             ).fit(optimized=True)​	
29	Modeling - ETS	최적 하이퍼 파라미터로​ 향후 2년 재배 면적 예측​​  Trend: 'additive'​  Damped Trend: True​		
30	Modeling - XGBOOST	1.지점별로 면적당 생산량에 기여하는 가중치가 다를 수 있음​ 1)기상 변수, 지점명을 조합하여 고유 컬럼 이름을 생성 (예: 평균기온(°C)_고흥)​ 2)학습을 통하여 지점별 가중치 업데이트​  X : 연도별 기상 데이터가 포함된 학습 데이터​ y : 연도별 10a당 쌀 생산량​	​ stations = ['고흥','목포','완도','장흥','여수','해남']​ climate_vars = ['평균기온(°C)', '월합강수량(00~24h만)(mm)', '일조율(%)',​                 '평균해면기압(hPa)', '평균수증기압(hPa)',​                 '평균상대습도(%)', '평균풍속(m/s)', '합계 일조시간(hr)']​ ​ df_yearly_wide = (​     df_yearly​     .pivot(index='년', columns='지점명', values=climate_vars)​ )​ df_yearly_wide.columns = [f"{var}_{st}" for var,st in df_yearly_wide.columns]​ X = df_yearly_wide.sort_index()​ y = (​     df_yearly​     .drop_duplicates('년')​     .set_index('년')['10a당 생산량(kg)']​     .loc[X.index]​ )​	
31	Modeling - XGBOOST	주요 하이퍼 파라미터​ -GridSearch를 이용하여 파라미터 조합 탐색​ 트리 개수(n_estimators) : 300​ 최대 깊이(max_depth) : 5​ 학습률(learning_rate) : 0.01​ ​서브 샘플링 비율(subsample) : 0.7​ 가장 낮은 교차검증 평균 RMSE : 27.98​	tscv = TimeSeriesSplit(n_splits=5)​ param_grid = {​     'n_estimators': [100, 200, 300],​     'max_depth':    [3, 5, 7],​     'learning_rate':[0.01, 0.1, 0.2],​     'subsample':    [0.7, 1.0]​ }​ xgb = XGBRegressor(objective='reg:squarederror', random_state=42)​ grid = GridSearchCV(​     xgb, param_grid,​     cv=tscv,​     scoring='neg_root_mean_squared_error',​     n_jobs=-1,​     verbose=1​ )​ grid.fit(X, y)​ ​ print("Best params:", grid.best_params_)​ print("CV RMSE:   ", -grid.best_score_)​	
32	Modeling - XGBOOST	학습 결과:​  Train RMSE: 7.603​  R² (Coefficient of Determination): 0.931	best = grid.best_estimator_​  ​  yield_fitted = pd.Series(​      best.predict(X),​      index=X.index,​      name='yield_kg10a'​  )​  ​	
33	Modeling - XGBOOST	최종 모델 예측값 생성​  예측한 월별 기후 데이터를 연단위 데이터로 변환 (df_monthly_predict -> df_yearly_pred)​  ​  변환한 데이터를 XGBOOST 학습 시 사용한 데이터 포맷에 맞춰 변환 (df_yearly_pred -> df_yearly_wide_pred)​  ​  XGBOOST 모델을 이용하여 나온 예측값을 yeild_fc_future로 저장​  ​  학습 시 저장한 결과값 yeild_fitted와 결합하여 yeild_all로 저장​  ​	# 1) long → wide 포맷으로 변환 (학습 때와 동일)​  df_yearly_wide_pred = (​      df_yearly_pred​        .pivot(index='년', columns='지점명', values=climate_vars)​  )​  df_yearly_wide_pred.columns = [f"{var}_{st}" for var, st in df_yearly_wide_pred.columns]​  X_future = df_yearly_wide_pred.sort_index()​  ​  # 2) out-of-sample 예측 수행​  preds_future = best.predict(X_future)​  ​  # 3) yield_fc_future 시리즈 생성​  yield_fc_future = pd.Series(​      preds_future,​      index=X_future.index.astype(int),​      name='yield_kg10a'​  )​  ​  …​  ​  yield_all       = pd.concat([yield_fitted, yield_fc_future])​  yield_tonha_all = yield_all * 10 / 1000   # kg/10a → ton/ha​  forecast_ton_all = yield_tonha_all.mul(​      area_all.reindex(yield_tonha_all.index)​  ).rename('Forecast_total_ton')​  ​ ​  ​	
34	Conclusion​	예측된 총 생산량 예측된 재배 면적(area_all)과 ​ 예측된 면적당 생산량(yield_all)을 곱하여 ​ 연도별 총 생산량을 계산.​ 계산된 결과는 forecast_ton_all 변수에 저장.​ 시각화 자료: 실제 쌀 생산량(2024까지)과 예측 쌀 생산량(2025, 2026)	전체 Forecast 톤 수 계산​ yield_all = pd.concat([yield_fitted, yield_fc_future])​  yield_tonha_all = yield_all * 10 / 1000   ​  ​  forecast_ton_all = yield_tonha_all.mul(​     area_all.reindex(yield_tonha_all.index)​ ).rename('Forecast_total_ton')​	
35	Conclusion​	Summary 데이터 준비: 과거 기상 변수와 쌀 재배 면적 데이터를 수집 및 전처리​ 모델링​ LSTM 기반 Seq2Seq 모델: 지점별 월별 기상 데이터를 활용하여 향후 24개월 동안의 기상 데이터를 예측​ ETS 모델: 과거 재배 면적 데이터를 기반으로 향후 2년 동안의 재배 면적을 예측​ XGBoost 모델: 연간 기상 데이터를 기반으로 면적당 쌀 생산량(10a당 생산량)을 예측​  결과 ​ 예측된 재배 면적과 면적당 생산량을 통해 총 생산량을 계산​		
36	Conclusion​	Discussion 주요 성과​ 다중 모델 통합: LSTM, ETS, XGBoost 모델을 유기적으로 결합하여 복합적인 예측 문제를 해결.​ 데이터 활용: 과거 기상 및 재배 데이터에서 유의미한 패턴을 추출하고, 이를 통해 미래를 예측.​  ​주의할 점​ 모델 간 상관성: seq2seq LSTM모델의 결과값이 XGBoost 모델에 사용되므로, 첫 번째 모델의 정확도가 전체 결과에 큰 영향을 미침.​ 기상 데이터의 불확실성: 기상 데이터를 기반으로 한 예측은 외부 환경 변화(예: 이상 기상)에 민감.​  ​배운 점​ 시계열 데이터의 복잡성: 시계열 데이터의 정상성, 계절성, 추세를 고려한 모델링의 중요성.​ 모델 선택의 중요성: 문제의 특성(단변량/다변량, 비정상성 등)에 따라 적합한 모델을 선택해야 함.​  향후 연구 방향​ 더 많은 변수 추가: 기상 이외의 경제적 요인(예: 쌀 가격, 소비량)을 포함하여 예측 모델의 정확도를 높일 수 있음.​ 지점 간 상호작용 모델링: 지점 간 상관성을 반영한 모델링(예: 공간적 관계)을 시도할 수 있음.​		
37	마지막 표지	감사합니다		여기까지 들어주셔서 감사합니다. 질문은 받지 않겠습니다.